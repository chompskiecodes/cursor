# tools/location_tools.py
"""Location-related endpoints for the Voice Booking System"""

from fastapi import APIRouter, Request, Depends, HTTPException
from typing import Dict, Any
import logging
import json
import time

# Local imports
from .dependencies import verify_api_key, get_db, get_cache, get_settings
from models import LocationResolverRequest, LocationResolverResponse, ConfirmLocationRequest
from database import get_clinic_by_dialed_number, get_location_by_name
from location_resolver import LocationResolver
from utils import normalize_phone, mask_phone
from payload_logger import payload_logger

logger = logging.getLogger(__name__)

# Create router
router = APIRouter(tags=["location"])

@router.post("/location-resolver")
async def resolve_location(
    location_request: LocationResolverRequest,
    authenticated: bool = Depends(verify_api_key)
) -> Dict[str, Any]:
    """Resolve ambiguous location references - ElevenLabs optimized"""
    
    # Log the incoming request
    payload_logger.log_payload("/location-resolver", location_request.dict())
    
    try:
        logger.info(f"=== LOCATION RESOLUTION START ===")
        logger.info(f"Session: {location_request.sessionId}")
        logger.info(f"Query: '{location_request.locationQuery}'")
        logger.info(f"Caller: {mask_phone(location_request.callerPhone) if location_request.callerPhone else 'Unknown'}")
        
        # Get database pool
        pool = await get_db()
        cache = await get_cache()
        
        # Get clinic information
        clinic = await get_clinic_by_dialed_number(location_request.dialedNumber, pool)
        if not clinic:
            return {
                "success": False,
                "sessionId": location_request.sessionId,
                "action_completed": False,
                "needs_clarification": False,
                "message": "I couldn't find the clinic information. Please contact the clinic directly.",
                "confidence": 0.0
            }
        
        # Initialize location resolver
        resolver = LocationResolver(pool, cache)
        
        # Resolve location
        response = await resolver.resolve_location(location_request, clinic.clinic_id)
        
        logger.info(f"Resolution result: action_completed={response.action_completed}, confidence={response.confidence}")
        if response.location_id:
            logger.info(f"Resolved to: {response.location_name} ({response.location_id})")
        
        # Convert to dict for JSON response
        return response.dict()
        
    except Exception as e:
        logger.error(f"Location resolution error: {str(e)}", exc_info=True)
        return {
            "success": False,
            "sessionId": location_request.sessionId,
            "action_completed": False,
            "needs_clarification": False,
            "message": "I encountered an error resolving the location. Please try again.",
            "confidence": 0.0
        }

@router.post("/confirm-location")
async def confirm_location(
    request: Request,  # Changed from ConfirmLocationRequest to Request
    authenticated: bool = Depends(verify_api_key)
) -> Dict[str, Any]:
    """Handle location confirmation from user - ElevenLabs compatible"""
    
    # Extract JSON body
    body = await request.json()
    payload_logger.log_payload("/confirm-location", body)
    
    # Extract parameters with safe defaults (like get_practitioner_info does)
    user_response = body.get('userResponse', '')
    options = body.get('options', [])
    session_id = body.get('sessionId', '')
    dialed_number = body.get('dialedNumber', '')
    caller_phone = body.get('callerPhone') or body.get('systemCallerID', '')
    
    try:
        logger.info(f"=== LOCATION CONFIRMATION ===")
        logger.info(f"Session: {session_id}")
        logger.info(f"User response: '{user_response}'")
        logger.info(f"Options: {options}")
        
        # VALIDATION: Check if we have the required data
        if not options or len(options) == 0:
            logger.warning("confirm-location called without options - likely called without location-resolver first")
            
            # Instead of failing, guide the agent to the correct flow
            return {
                "success": True,  # Still "successful" from HTTP perspective
                "location_confirmed": False,
                "message": "I need to check which locations are available first. Let me look that up for you.",
                "sessionId": session_id,
                "action": "need_location_resolver",  # Hint for the agent
                "hint": "Please call location-resolver with the location name first"
            }
        
        # If no user response provided
        if not user_response:
            return {
                "success": True,
                "location_confirmed": False,
                "message": "Could you please tell me which location you prefer?",
                "options": options,
                "sessionId": session_id
            }
        
        # Parse user response
        user_response_lower = user_response.lower().strip()
        
        # Rest of the confirmation logic remains the same...
        selected_location = None
        selected_index = None
        
        # Direct index reference: "the first one", "number 2", "1", "2"
        if any(x in user_response_lower for x in ["first", "1st", "one"]) or user_response_lower == "1":
            selected_index = 0
        elif any(x in user_response_lower for x in ["second", "2nd", "two"]) or user_response_lower == "2":
            selected_index = 1
        elif any(x in user_response_lower for x in ["third", "3rd", "three"]) or user_response_lower == "3":
            selected_index = 2
        
        # Yes/no responses (assume first option)
        if selected_index is None and any(x in user_response_lower for x in ["yes", "yeah", "yep", "sure", "correct", "that's right", "that one"]):
            selected_index = 0
        
        # Direct name match
        if selected_index is None:
            for idx, option in enumerate(options):
                option_lower = option.lower()
                # Check if user response contains the option or vice versa
                if option_lower in user_response_lower or user_response_lower in option_lower:
                    selected_index = idx
                    break
                
                # Check for partial matches (at least 3 characters)
                words_in_response = user_response_lower.split()
                words_in_option = option_lower.split()
                for word in words_in_response:
                    if len(word) >= 3 and any(word in opt_word for opt_word in words_in_option):
                        selected_index = idx
                        break
        
        # Handle "last" or "other" for 2-option scenarios
        if selected_index is None and len(options) == 2:
            if any(x in user_response_lower for x in ["last", "other", "second", "latter"]):
                selected_index = 1
        
        # If we found a selection
        if selected_index is not None and selected_index < len(options):
            selected_location = options[selected_index]
            
            # Get database pool
            pool = await get_db()
            cache = await get_cache()
            
            # Get clinic to find location ID
            clinic = await get_clinic_by_dialed_number(dialed_number, pool)
            if not clinic:
                return {
                    "success": True,
                    "location_confirmed": False,
                    "message": "I'm having trouble accessing the clinic information. Could you please try again?",
                    "sessionId": session_id
                }
            
            # Resolve to actual business_id
            location_data = await get_location_by_name(
                clinic.clinic_id,
                selected_location,
                pool
            )
            
            if location_data:
                # Update caller's preferred location in cache
                if caller_phone:
                    phone_normalized = normalize_phone(caller_phone)
                    context = await cache.get_booking_context(phone_normalized) or {}
                    context['preferred_location'] = {
                        'business_id': location_data['business_id'],
                        'business_name': location_data['business_name']
                    }
                    await cache.set_booking_context(phone_normalized, clinic.clinic_id, context)
                
                logger.info(f"Location confirmed: {selected_location} -> {location_data['business_id']}")
                
                return {
                    "success": True,
                    "location_confirmed": True,
                    "business_name": selected_location,
                    "business_id": location_data['business_id'],
                    "message": f"Perfect! I'll use our {selected_location} for your appointment.",
                    "sessionId": session_id
                }
            else:
                logger.error(f"Could not find location data for: {selected_location}")
                return {
                    "success": True,
                    "location_confirmed": False,
                    "message": "I'm having trouble finding that location in our system. Let me check what locations are available.",
                    "sessionId": session_id,
                    "action": "need_location_resolver"
                }
        
        # Couldn't parse response - ask again with clearer instructions
        if len(options) == 1:
            # Single option - treat as yes/no
            return {
                "success": True,
                "location_confirmed": False,
                "message": f"Just to confirm, would you like to book at {options[0]}? Please say yes or no.",
                "options": options,
                "sessionId": session_id
            }
        elif len(options) == 2:
            return {
                "success": True,
                "location_confirmed": False,
                "message": f"I have two locations: {options[0]} and {options[1]}. You can say 'first', 'second', or the location name.",
                "options": options,
                "sessionId": session_id
            }
        else:
            # Multiple options
            return {
                "success": True,
                "location_confirmed": False,
                "message": "I didn't catch that. Could you please tell me which location you prefer? You can say 'first', 'second', 'third', or the location name.",
                "options": options,
                "sessionId": session_id
            }
        
    except Exception as e:
        logger.error(f"Location confirmation error: {str(e)}", exc_info=True)
        # Return a graceful response instead of an error
        return {
            "success": True,
            "location_confirmed": False,
            "message": "I'm having a little trouble with that. Could you please repeat which location you'd like?",
            "sessionId": session_id
        }

@router.post("/get-location-practitioners")
async def get_location_practitioners(
    request: Request,
    authenticated: bool = Depends(verify_api_key)
) -> Dict[str, Any]:
    """Get all practitioners who work at a specific location"""
    
    body = await request.json()
    location_id = body.get('locationId', '')  # From location-resolver
    location_name = body.get('locationName', '')
    dialed_number = body.get('dialedNumber', '')
    session_id = body.get('sessionId', '')
    
    # Get database pool
    pool = await get_db()
    
    # Get clinic
    clinic = await get_clinic_by_dialed_number(dialed_number, pool)
    if not clinic:
        return {
            "success": False,
            "message": "I couldn't find the clinic information.",
            "sessionId": session_id
        }
    
    # Query practitioners at this location
    query = """
        SELECT DISTINCT
            p.practitioner_id,
            CASE 
                WHEN p.title IS NOT NULL AND p.title != '' 
                THEN CONCAT(p.title, ' ', p.first_name, ' ', p.last_name)
                ELSE CONCAT(p.first_name, ' ', p.last_name)
            END as practitioner_name,
            COUNT(DISTINCT pat.appointment_type_id) as service_count
        FROM practitioners p
        JOIN practitioner_businesses pb ON p.practitioner_id = pb.practitioner_id
        JOIN practitioner_appointment_types pat ON p.practitioner_id = pat.practitioner_id
        WHERE pb.business_id = $1
          AND p.active = true
          AND p.clinic_id = $2
        GROUP BY p.practitioner_id, p.first_name, p.last_name, p.title
        ORDER BY practitioner_name
    """
    
    async with pool.acquire() as conn:
        rows = await conn.fetch(query, location_id, clinic.clinic_id)
    
    if not rows:
        return {
            "success": True,
            "locationName": location_name,
            "practitioners": [],
            "message": f"I don't see any practitioners currently available at {location_name}.",
            "sessionId": session_id
        }
    
    practitioners = [dict(row) for row in rows]
    names = [p['practitioner_name'] for p in practitioners]
    
    # Format message
    if len(names) == 1:
        message = f"At {location_name}, we have {names[0]} available."
    elif len(names) == 2:
        message = f"At {location_name}, we have {names[0]} and {names[1]} available."
    else:
        last = names[-1]
        others = names[:-1]
        message = f"At {location_name}, we have {', '.join(others)}, and {last} available."
    
    return {
        "success": True,
        "locationName": location_name,
        "practitioners": practitioners,
        "practitionerNames": names,
        "message": message,
        "sessionId": session_id
    }